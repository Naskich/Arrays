/*Problem 1. Allocate array
                • Write a program that allocates array of  20  
                integers and initializes each element by its index multiplied by  5 .
                • Print the obtained array on the console.*/
using System;
namespace Array5Location
{
    class Program
    {
        static void Main()
        {
            int[] array = new int[20] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
            for (int index = 0; index < 20; index++)
            {
                Console.WriteLine(" [{0}] = {1} * 5 = {2}", index, array[index], array[index] * 5 );
            }
        }
    }
SECOND -----------------------------------------------------------------------------
using System;
namespace Compary
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] array = new int[20];
                array[0] = 1;
                array[1] = 2;
                array[2] = 3;
                array[3] = 4;
                array[4] = 5;
                array[5] = 6;
                array[6] = 7;
                array[7] = 8;
                array[8] = 9;
                array[9] = 10;
                array[10] = 11;
                array[11] = 12;
                array[12] = 13;
                array[13] = 14;
                array[14] = 15;
                array[15] = 16;
                array[16] = 17;
                array[17] = 18;
                array[18] = 19;
                array[19] = 20;
     
            for (int i = 0; i <20; i++)
            {
                Console.WriteLine("array [{0}] = {1} * 5 = {2}", i ,array[i],array[i] * 5);
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------
/Problem 2. Compare arrays
//Write a program that reads two integer arrays from the console and compares them element by element.
using System;
namespace CompareMasive
{
    class Program
    {
        static void Main()
        {    
            int[] arr1 = new int[5] { 7,66,71,2,3 };
            int n = arr1.Length;
            int c = arr1.Length - 1;
          
            for (int i = 0; i < n; i++)
            {
                Console.WriteLine("Arreay is [{0}] = {1}", i, arr1[i]);         
            }
            Console.WriteLine();
            bool symetric = true;
            for (int a = 0; a < n; a++)
            {
                if (arr1[a] != arr1[c-a])
                {
                    symetric = false;
                }
            }
            if (symetric)
            {
                Console.WriteLine("Array is Symetric");
            }
            else {
                Console.WriteLine("Array is NOT  Symetric");
            }
            Console.WriteLine(); 

            int[] arr2 = new int[5] { 7, 31, 1, 5, 20 };
            int b = arr2.Length;
            int h = arr2.Length - 1;
            for (int d = 0; d<b; d++)
            {
                Console.WriteLine("Arreay is [{0}] = {1}", d, arr2[d]);
            }
            Console.WriteLine();
            bool symetric2 = true;
            for (int r = 0; r <=h; r++)
            {
                if (arr2[r] != arr2[h-r]) {
                    symetric2 = false;
                }
            }
            if (symetric2)
            {
                Console.WriteLine("Array is Symetric");
            }
            else
            {
                Console.WriteLine("Array is NOT Symetric");
            }
            Console.WriteLine();
            if (arr1 == arr2)
            {
                Console.WriteLine("Arrays are sames");
            }
            else {
                Console.WriteLine("Arrays are deferent");
            }
            Console.WriteLine();
        }
    }
}
----------------------------------------------------------------------------------------------------------
//Problem 3. Compare char arrays
//Write a program that compares two char arrays lexicographically(letter by letter).
using System;
using System.Collections.Generic;
namespace ComapreArrayChar
{
    class Program
    {
        static void Main()
        {
            char[] char1 = new char[5] { 'a', 'b', 'c', 'd', 'h' };
            char[] char2 = new char[5] { 'a', 'n', 'd', 'r', 'h' };
            foreach (char simbol1 in char1)
            {
                System.Console.Write("{0}", simbol1);
            }
            Console.WriteLine("- Array1");
            foreach (char simbol2 in char2)
            {
                System.Console.Write("{0}", simbol2);
            }
            Console.WriteLine("-Array2");

            if (char1[0] != char2[0])
            {
                Console.WriteLine("First element - FALSE - {0} DEFERENT {1}", char1[0], char2[0]);
            }
            else
            {
                Console.WriteLine("First element is TRUE - {0} = {1}", char1[0], char2[0]); 
            }
            Console.WriteLine();
            if (char1[1] != char2[1])
            {
                Console.WriteLine("Second element - FALSE - {0} DEFERENT {1}", char1[1], char2[1]);
            }
            else
            {
                Console.WriteLine("Second element is TRUE - {0} = {1}", char1[1], char2[1]);
            }
            Console.WriteLine();
            if (char1[2] != char2[2])
            {
                Console.WriteLine("Thirt element - FALSE - {0} DEFERENT {1}", char1[2], char2[2]);
            }
            else
            {
                Console.WriteLine("Thirt element is TRUE - {0} = {1}", char1[2], char2[2]);
            }
            Console.WriteLine();
            if (char1[3] != char2[3])
            {
                Console.WriteLine("Fuor element - FALSE - {0} DEFERENT {1}", char1[3], char2[3]);
            }
            else
            {
                Console.WriteLine("Thirt element is TRUE - {0} = {1}", char1[3], char2[3]);
            }
            Console.WriteLine();
            if (char1[4] != char2[4])
            {
                Console.WriteLine("Thirt element - FALSE - {0} DEFERENT {1}", char1[4], char2[4]);
            }
            else
            {
                Console.WriteLine("Thirt element is TRUE - {0} = {1}", char1[4], char2[4]);
            }
            Console.WriteLine();
        }
    }
}
---------------------------------------------------------------------------------------------------------------
//Problem 15. Prime numbers
//Write a program that finds all prime numbers in the range[1...10 000 000]. Use the Sieve of Eratosthenes algorithm.
using System;
namespace Eratosthenes algorithm
{
    class Program
    {
        static void Main()
        {
            int[] array = new int[10000000];
            array[9999999] = 10000000;
            Console.WriteLine("ARRAY = {0}", array[1]);
            Console.WriteLine("ARRAY = {0}", array[2]);
            Console.WriteLine("ARRAY = {0}", array[4]);
            Console.WriteLine("ARRAY = {0}", array[6]);
            for (var a = 2; a < 10000000; a++)
            {
                if (a % 2 != 0 && a % 3 != 0 && a % 5 != 0 && a % 7 != 0)
                {
                    Console.WriteLine("ARRAY = {0}", a);
                }
            }
          Console.WriteLine();
        }
    }
------------------------------------------------------------------------------------------------------------
/*Problem 20.* Variations of set
Write a program that reads two numbers N and K and generates all the variations of K elements from the set [1..N].
Example:
N
K
result
3
2
{1, 1} 
{1, 2} 
{1, 3} 
{2, 1} 
{2, 2} 
{2, 3} 
{3, 1} 
{3, 2} 
{3, 3}*/

using System;

namespace VariationMatrix
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("Please insert number of type integer for Array 1..9");
            Console.Write("Insert number N = ");
            int rows = int.Parse(Console.ReadLine());
            Console.Write("Insert number K = ");
            int colomns = int.Parse(Console.ReadLine());
            if (rows >= colomns)
            {
                int[,] matrix = new int[rows, colomns];
                for (int n = 1; n <= matrix.GetLength(0); n++)
                {
                    for (int r = 1; r <= rows; r++)
                    {
                        Console.WriteLine("[{0},{1}]", n, r);
                    }
                }
            }
            else
            {
                int[,] matrix = new int[rows, colomns];
                for (int n = 1; n <= colomns; n++)
                {
                    for (int r = 1; r <= matrix.GetLength(1) ; r++)
                    {
                        Console.WriteLine("[{0},{1}]", n, r);
                    }
                }
            }            
        }
    }
}
-------------------------------------------------------------------------------------------
/*Homework: Multidimensional Arrays
Problem 1. Fill the matrix
Write a program that fills and prints a matrix of size(n, n) as shown below:
Example for n=4:*/

using System;
using System.Linq;

namespace PermutationsOfSet
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Please insert number of type integer for Array 1..9");
            Console.Write("Insert number N = ");
            int n = int.Parse(Console.ReadLine());
            int matrix = n * n;
            int[,] array = new int[n, n];

                for (int i = 1; i < 5; i++)
                {
                    Console.Write(" {0} ", i);              
                }
                Console.WriteLine();
                for (int a = 5; a <= 8; a++)
                {
                    Console.Write(" {0} ", a);
                }
                Console.WriteLine();
                for (int b = 9; b <= 12; b++)
                {
                    Console.Write(" {0} ", b);
                }
                Console.WriteLine();
                for (int c = 13; c <= matrix; c++)
                {
                    Console.Write(" {0} ", c);
                } 
        }  
    }
}